<!DOCTYPE html>
<html>
<head>
	<title>Canvas Game</title>
</head>
<body>


<canvas id="game"></canvas>
<div id="timer">30 seconds</div>
<div id="scoreUpdate">Score: <span id="score-value">0</span></div>
<div id="hi-score">High Score: <span id="hi-score-value">0</span></div>


<button onclick="startGame();">Start Game</button>
<button onclick="newPlayer();">New Player</button>
<input id="player-name" type="text" placeholder="Player Name">

<script type="text/javascript">


function Player(name){
	this.name = name;
	this.highscore = 0;
}

// Alternative
// Player.prototype.highscore = 0;


function newPlayer(){
	var playerNameDiv = document.getElementById('player-name');
	var playerName = playerNameDiv.value;
	var player = new Player(playerName);
	playerArray.push(player);
	console.log(playerArray)
// Lines 29-30 is consolidated in line 35
	// playerArray.push(new Player(playerName));
	// console.log(playerArray);
	// console.log(playerName);
}



// <!-- 1. Add a pause button.
// 2. Add a countdown timer.
// 2a. ONce timer runs out, game is over.
// 3. Keep score by player
// 3a. Make a player constructor -name(ask), high score
// 3b. Make an input for player name.
// 3c. Make a button a new player. --> 





// 2. Add a countdown timer.
// Start game button.
function startGame(){
	gameOn = true;
	//user started the game. Save the time, save the time + 30 sec
	gameStart = Date.now();
	gameEnd = Date.now() + 30000;
	//start the interval
	timerInterval = setInterval(updateTimer, 500);
	// When someone starts a new game, you need to clear out current score but keep the high score
	currentPlayersScore = 0;
	document.getElementById('score-value').innerHTML = 0;
}

function updateTimer(){
	var newNow = Date.now();
	//Subtract the gameEnd time from the current time.
	var timeDifference = (gameEnd - newNow)/1000;
	if (timeDifference < 0){
		clearInterval(timerInterval);
		gameOn = false;
		timeDifference = 0;	
		document.getElementById('timer').innerHTML = "Game over!";
		document.getElementById('scoreUpdate').innerHTML = score;
	}else{
	document.getElementById('timer').innerHTML = timeDifference + " seconds";
	}
}

var modifier = 50;
var gameStart = 0;
var gameEnd = 0;
var timerInterval;
var playerArray = [];
var highscore = 0;
var currentPlayersScore = 0;


// When clicked on, the game starts(timer starts, player can move)
// When clicked on, get Date.now() save it to the current Date
// When clicked on, get Date.now() + 30 * 1000 milliseconds
// Create a setInterval to run every X and inside, recalculate the timer
// When the difference is < 0, stop the game, clear the timer. Check highscore.






//console.dir(document.body);
	// Create the canvas tag with JS
	var canvas = document.getElementById('game');
	// Create a context for JS to play with(methods, properties,,...)
	var context = canvas.getContext('2d')
	
	// Give the canvas some height and width
	canvas.width = 512;
	canvas.height = 480;
		

	// Add the canvas tag to the DOM. The "new" means you're about to make a new JS object.
	document.body.appendChild(canvas);

	var backgroundImage = new Image();
	backgroundImage.src = "background.png";

	var speedModifier = 1;
	var gameOn = false;

	// Make a var for our hero. He is an image!
	var hero = new Image();
	hero.src = "hero.png";

	// Make hero move! Make into a variable
	var heroLocation = {
		x:100,
		y:100
	}

	// Make a var for our bad guy. He is an image!
	var monster = new Image();
	monster.src = "monster.png";

	var monsterLocation = {
		speed: 2,
		x:200,
		y:100
	}
	
	// An array to hold all the keys that are currently pressed down.
	var keysDown = [];

	addEventListener('keyup', function(event){
		delete keysDown[event.keyCode];
	});

	// We need a way to tell if the user has pushed an arrow key. Event listeners: First thing is "what", second piece is what code to run. In the example below, code only happens when keydown happens.
	addEventListener('keydown', function(event){
		// if keyDown[39] is true, then the user pushed the right arrow.
		// if keyDown[40] is true, then the user pushed the down arrow.
		// if keyDown[37] is true, then the user pushed the left arrow.
		// if keyDown[38] is true, then the user pushed the up arrow.
		keysDown[event.keyCode] = true;
		//console.log(keysDown);


		// We know a key was pressed, or we wouldn't be in here
		// What key did they press? Event object is passed on. Because of the key property, we know what key they pressed.
		
		// console.log(event.key);
		// if (event.key === 'ArrowDown'){
		// 	console.log('User pressed down arrow');
		// 	heroLocation.y += 10;
		// } 
		// if (event.key === 'ArrowUp'){
		// 	console.log('User pressed up arrow');
		// 	heroLocation.y -= 10;
		// }
		// if (event.key === 'ArrowLeft'){
		// 	console.log('User pressed left arrow');
		// 	heroLocation.x -= 10;
		// }
		// if (event.key === 'ArrowRight'){
		// 	console.log('User pressed right arrow');
		// 	heroLocation.x += 10;
		// }
	});

	// This is where we will update the hero based on what's true in keysDown


	function update(){
		if(39 in keysDown){
			if (heroLocation.x <= 400){
				heroLocation.x += (10 * speedModifier); 
			}
			// write an if statement to make x=right side of the screen because guy will fall off the screen
		}
		if(37 in keysDown){
			if(heroLocation.x >= 10){
				heroLocation.x -=(10 * speedModifier);
			}
		}
		if(38 in keysDown){
			if(heroLocation.y >= 10){
				heroLocation.y -= (10 * speedModifier);
			}
		}
		if(40 in keysDown){
			if(heroLocation.y <= 400){
				heroLocation.y += (10 * speedModifier);
			}
		}

		if(
			(heroLocation.x <= monsterLocation.x + 32)
			&& (heroLocation.y <= monsterLocation.y + 32)
			&& (monsterLocation.x <= heroLocation.x + 32)
			&& (monsterLocation.y <= heroLocation.y + 32)
		){
			//console.log("Hero is within 32 of the monster");
			//currentPlayersScore may not be high score
			currentPlayersScore++;
			document.getElementById('score-value').innerHTML = currentPlayersScore;
			// We have updated the players score. Check it against highscore. If it's higher, we have a new highscore!!
			if(currentPlayersScore > highscore){
				highscore = currentPlayersScore;
				document.getElementById('hi-score-value').innerHTML = highscore;
			}

			// The last element in the Players array is the current player.
			var currentPlayerIndex = playerArray.length-1;
			console.log(playerArray[currentPlayerIndex]);
			if(currentPlayersScore > playerArray[currentPlayerIndex].highscore){
				playerArray[currentPlayerIndex].highscore = currentPlayersScore;
			}


			// We took lines out below to add in the high score vs. current score
			// console.log(highscore);
			// console.log("Hero caught the monster");
			// // Adds one to score every time collision happens
			// score++;
			// document.getElementById('score').innerHTML = "Your score is " + score;
			// console.log(score);



			var random = Math.random() * 200;
			var random2 = Math.random() * 200;
			monsterLocation.x = random;
			monsterLocation.y = random2;
		}

	}
	// Make monster move on it's own until caught by hero.png. Use switches to make monster move in a line.
function moveMonster(speed){
	var direction = monsterDirectionChange();
	switch(direction){
		case 'up':
			monsterLocation.y -= monsterLocation.speed + modifier;
			break;
		case 'left':
			monsterLocation.x -= monsterLocation.speed + modifier;
			break;
		case 'right':
			monsterLocation.x += monsterLocation.speed + modifier;
			break;
		case 'down':
			monsterLocation.y += monsterLocation.speed + modifier;
			break;
		case 'up-left':
			monsterLocation.y -= monsterLocation.speed + modifier;
			monsterLocation.x -= monsterLocation.speed + modifier;
			break;
		case 'up-right':
			monsterLocation.y -= monsterLocation.speed + modifier;
			monsterLocation.x += monsterLocation.speed + modifier;
			break;
		case 'down-left':
			monsterLocation.x -= monsterLocation.speed + modifier;
			monsterLocation.y += monsterLocation.speed + modifier;
			break;
		case 'down-right':
			monsterLocation.y += monsterLocation.speed + modifier;
			monsterLocation.x += monsterLocation.speed + modifier;
			break;
	}
}



function monsterDirectionChange(){
	var direction;
	if(turn == 1){
		direction = 'up';
	}else if(turn == 2){
		direction = 'left';
	}else if(turn == 3){
		direction = 'down';
	}else if(turn == 4){
		direction = 'right';
	}else if(turn == 5){
		direction = 'up-left';
	}else if(turn == 6){
		direction = 'up-right';
	}else if(turn == 7){
		direction = 'down-left';
	}else if(turn == 8){
		direction = 'down-right';
	}
	return direction;
}
var turn
// function turnMonster(){
// 	turn = Math.floor(Math.random()*8);
// }
// setInterval(turnMonster,10000)
console.log(turn)
var score = 0;

// Keep this at the bottom
	function draw(){
		if (gameOn){
			moveMonster();
			monsterDirectionChange();
			// turnMonster();
			update();
		}
		
		// Put our backgroundImage on the context at x = 0, y = 0. 3 parameters: what to draw, where (x and y coordinate)?
		context.drawImage(backgroundImage, 0, 0);
		context.drawImage(hero, heroLocation.x, heroLocation.y);
		context.drawImage(monster, monsterLocation.x, monsterLocation.y);
		requestAnimationFrame(draw);
	}

draw();


</script>

</body>
</html>

